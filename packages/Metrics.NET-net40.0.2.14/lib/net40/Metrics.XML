<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Metrics</name>
    </assembly>
    <members>
        <member name="T:Metrics.Utils.IHideObjectMembers">
            <summary>
            Helper interface to cleanup editor visible members on metrics.
            </summary>
        </member>
        <member name="M:Metrics.AdvancedMetricsContext.AttachContext(System.String,Metrics.MetricsContext)">
            <summary>
            Attach a context that has already been created (ex: by a library exposing internal metrics)
            </summary>
            <param name="contextName">name of the context to attach</param>
            <param name="context">Existing context instance.</param>
            <returns>true if the context was attached, false otherwise.</returns>
        </member>
        <member name="M:Metrics.AdvancedMetricsContext.CompletelyDisableMetrics">
            <summary>
            All metrics operations will be NO-OP.
            This is useful for measuring the impact of the metrics library on the application.
            If you think the Metrics library is causing issues, this will disable all Metrics operations.
            </summary>
        </member>
        <member name="M:Metrics.AdvancedMetricsContext.ResetMetricsValues">
            <summary>
            Clear all collected data for all the metrics in this context
            </summary>
        </member>
        <member name="M:Metrics.AdvancedMetricsContext.Gauge(System.String,System.Func{Metrics.MetricData.MetricValueProvider{System.Double}},Metrics.Unit,Metrics.MetricTags)">
            <summary>
            Register a custom Gauge instance.
            </summary>
            <param name="name">Name of the metric. Must be unique across all counters in this context.</param>
            <param name="unit">Description of what the is being measured ( Unit.Requests , Unit.Items etc ) .</param>
            <param name="valueProvider">Function used to build a custom instance.</param>
            <param name="tags">Optional set of tags that can be associated with the metric.</param>
        </member>
        <member name="M:Metrics.AdvancedMetricsContext.Counter``1(System.String,Metrics.Unit,System.Func{``0},Metrics.MetricTags)">
            <summary>
            Register a custom Counter instance
            </summary>
            <param name="name">Name of the metric. Must be unique across all counters in this context.</param>
            <param name="unit">Description of what the is being measured ( Unit.Requests , Unit.Items etc ) .</param>
            <param name="builder">Function used to build a custom instance.</param>
            <param name="tags">Optional set of tags that can be associated with the metric.</param>
            <returns>Reference to the metric</returns>
        </member>
        <member name="M:Metrics.AdvancedMetricsContext.Meter``1(System.String,Metrics.Unit,System.Func{``0},Metrics.TimeUnit,Metrics.MetricTags)">
            <summary>
            Register a custom Meter instance.
            </summary>
            <param name="name">Name of the metric. Must be unique across all meters in this context.</param>
            <param name="unit">Description of what the is being measured ( Unit.Requests , Unit.Items etc ) .</param>
            <param name="builder">Function used to build a custom instance.</param>
            <param name="rateUnit">Time unit for rates reporting. Defaults to Second ( occurrences / second ).</param>
            <param name="tags">Optional set of tags that can be associated with the metric.</param>
            <returns>Reference to the metric</returns>
        </member>
        <member name="M:Metrics.AdvancedMetricsContext.Histogram``1(System.String,Metrics.Unit,System.Func{``0},Metrics.MetricTags)">
            <summary>
            Register a custom Histogram instance
            </summary>
            <param name="name">Name of the metric. Must be unique across all histograms in this context.</param>
            <param name="unit">Description of what the is being measured ( Unit.Requests , Unit.Items etc ) .</param>
            <param name="builder">Function used to build a custom instance.</param>
            <param name="tags">Optional set of tags that can be associated with the metric.</param>
            <returns>Reference to the metric</returns>
        </member>
        <member name="M:Metrics.AdvancedMetricsContext.Histogram(System.String,Metrics.Unit,System.Func{Metrics.Sampling.Reservoir},Metrics.MetricTags)">
            <summary>
            Register a Histogram metric with a custom Reservoir instance
            </summary>
            <param name="name">Name of the metric. Must be unique across all histograms in this context.</param>
            <param name="unit">Description of what the is being measured ( Unit.Requests , Unit.Items etc ) .</param>
            <param name="builder">Function used to build a custom reservoir instance.</param>
            <param name="tags">Optional set of tags that can be associated with the metric.</param>
            <returns>Reference to the metric</returns>
        </member>
        <member name="M:Metrics.AdvancedMetricsContext.Timer``1(System.String,Metrics.Unit,System.Func{``0},Metrics.TimeUnit,Metrics.TimeUnit,Metrics.MetricTags)">
            <summary>
            Register a custom Timer implementation.
            </summary>
            <param name="name">Name of the metric. Must be unique across all timers in this context.</param>
            <param name="unit">Description of what the is being measured ( Unit.Requests , Unit.Items etc ) .</param>
            <param name="builder">Function used to build a custom instance.</param>
            <param name="rateUnit">Time unit for rates reporting. Defaults to Second ( occurrences / second ).</param>
            <param name="durationUnit">Time unit for reporting durations. Defaults to Milliseconds. </param>
            <param name="tags">Optional set of tags that can be associated with the metric.</param>
            <returns>Reference to the metric</returns>
        </member>
        <member name="M:Metrics.AdvancedMetricsContext.Timer(System.String,Metrics.Unit,System.Func{Metrics.Core.HistogramImplementation},Metrics.TimeUnit,Metrics.TimeUnit,Metrics.MetricTags)">
            <summary>
            Register a Timer metric with a custom Histogram implementation.
            </summary>
            <param name="name">Name of the metric. Must be unique across all timers in this context.</param>
            <param name="unit">Description of what the is being measured ( Unit.Requests , Unit.Items etc ) .</param>
            <param name="builder">Function used to build a custom histogram instance.</param>
            <param name="rateUnit">Time unit for rates reporting. Defaults to Second ( occurrences / second ).</param>
            <param name="durationUnit">Time unit for reporting durations. Defaults to Milliseconds. </param>
            <param name="tags">Optional set of tags that can be associated with the metric.</param>
            <returns>Reference to the metric</returns>
        </member>
        <member name="M:Metrics.AdvancedMetricsContext.Timer(System.String,Metrics.Unit,System.Func{Metrics.Sampling.Reservoir},Metrics.TimeUnit,Metrics.TimeUnit,Metrics.MetricTags)">
            <summary>
            Register a Timer metric with a custom Reservoir implementation for the histogram.
            </summary>
            <param name="name">Name of the metric. Must be unique across all timers in this context.</param>
            <param name="unit">Description of what the is being measured ( Unit.Requests , Unit.Items etc ) .</param>
            <param name="builder">Function used to build a custom reservoir instance.</param>
            <param name="rateUnit">Time unit for rates reporting. Defaults to Second ( occurrences / second ).</param>
            <param name="durationUnit">Time unit for reporting durations. Defaults to Milliseconds. </param>
            <param name="tags">Optional set of tags that can be associated with the metric.</param>
            <returns>Reference to the metric</returns>
        </member>
        <member name="M:Metrics.AdvancedMetricsContext.WithCustomMetricsBuilder(Metrics.Core.MetricsBuilder)">
            <summary>
            Replace the DefaultMetricsBuilder used in this context.
            </summary>
            <param name="metricsBuilder">The custom metrics builder.</param>
        </member>
        <member name="E:Metrics.AdvancedMetricsContext.ContextShuttingDown">
            <summary>
            Event fired when the context is disposed or shutdown or the CompletelyDisableMetrics is called.
            </summary>
        </member>
        <member name="E:Metrics.AdvancedMetricsContext.ContextDisabled">
            <summary>
            Event fired when the context CompletelyDisableMetrics is called.
            </summary>
        </member>
        <member name="T:Metrics.Logging.ILog">
            <summary>
            Simple interface that represent a logger.
            </summary>
        </member>
        <member name="M:Metrics.Logging.ILog.Log(Metrics.Logging.LogLevel,System.Func{System.String})">
            <summary>
            Log a message the specified log level.
            </summary>
            <param name="logLevel">The log level.</param>
            <param name="messageFunc">The message function.</param>
            <remarks>
            Note to implementors: the message func should not be called if the loglevel is not enabled
            so as not to incur perfomance penalties.
            </remarks>
        </member>
        <member name="M:Metrics.Logging.ILog.Log``1(Metrics.Logging.LogLevel,System.Func{System.String},``0)">
            <summary>
            Log a message and exception at the specified log level.
            </summary>
            <typeparam name="TException">The type of the exception.</typeparam>
            <param name="logLevel">The log level.</param>
            <param name="messageFunc">The message function.</param>
            <param name="exception">The exception.</param>
            <remarks>
            Note to implementors: the message func should not be called if the loglevel is not enabled
            so as not to incur perfomance penalties.
            </remarks>
        </member>
        <member name="T:Metrics.Logging.LogLevel">
            <summary>
            The log level.
            </summary>
        </member>
        <member name="T:Metrics.Logging.ILogProvider">
            <summary>
            Represents a way to get a <see cref="T:Metrics.Logging.ILog"/>
            </summary>
        </member>
        <member name="T:Metrics.Logging.LogProvider">
            <summary>
            Provides a mechanism to create instances of <see cref="T:Metrics.Logging.ILog"/> objects.
            </summary>
        </member>
        <member name="M:Metrics.Logging.LogProvider.For``1">
            <summary>
            Gets a logger for the specified type.
            </summary>
            <typeparam name="T">The type whose name will be used for the logger.</typeparam>
            <returns>An instance of <see cref="T:Metrics.Logging.ILog"/></returns>
        </member>
        <member name="M:Metrics.Logging.LogProvider.GetCurrentClassLogger">
            <summary>
            Gets a logger for the current class.
            </summary>
            <returns>An instance of <see cref="T:Metrics.Logging.ILog"/></returns>
        </member>
        <member name="M:Metrics.Logging.LogProvider.GetLogger(System.Type)">
            <summary>
            Gets a logger for the specified type.
            </summary>
            <param name="type">The type whose name will be used for the logger.</param>
            <returns>An instance of <see cref="T:Metrics.Logging.ILog"/></returns>
        </member>
        <member name="M:Metrics.Logging.LogProvider.GetLogger(System.String)">
            <summary>
            Gets a logger with the specified name.
            </summary>
            <param name="name">The name.</param>
            <returns>An instance of <see cref="T:Metrics.Logging.ILog"/></returns>
        </member>
        <member name="M:Metrics.Logging.LogProvider.SetCurrentLogProvider(Metrics.Logging.ILogProvider)">
            <summary>
            Sets the current log provider.
            </summary>
            <param name="logProvider">The log provider.</param>
        </member>
        <member name="P:Metrics.Logging.LogProviders.LoupeLogProvider.ProviderIsAvailableOverride">
            <summary>
            Gets or sets a value indicating whether [provider is available override]. Used in tests.
            </summary>
            <value>
            <c>true</c> if [provider is available override]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Metrics.Logging.LogProviders.LoupeLogProvider.WriteDelegate">
            <summary>
            The form of the Loupe Log.Write method we're using
            </summary>
        </member>
        <member name="T:Metrics.Logging.LogProviders.ColouredConsoleLogProvider.MessageFormatterDelegate">
            <summary>
            A delegate returning a formatted log message
            </summary>
            <param name="loggerName">The name of the Logger</param>
            <param name="level">The Log Level</param>
            <param name="message">The Log Message</param>
            <param name="e">The Exception, if there is one</param>
            <returns>A formatted Log Message string.</returns>
        </member>
        <member name="T:Metrics.MetricsContext">
            <summary>
            Represents a logical grouping of metrics
            </summary>
        </member>
        <member name="M:Metrics.MetricsContext.Context(System.String)">
            <summary>
            Create a new child metrics context. Metrics added to the child context are kept separate from the metrics in the 
            parent context.
            </summary>
            <param name="contextName">Name of the child context.</param>
            <returns>Newly created child context.</returns>
        </member>
        <member name="M:Metrics.MetricsContext.Context(System.String,System.Func{System.String,Metrics.MetricsContext})">
            <summary>
            Create a new child metrics context. Metrics added to the child context are kept separate from the metrics in the 
            parent context.
            </summary>
            <param name="contextName">Name of the child context.</param>
            <param name="contextCreator">Function used to create the instance of the child context. (Use for creating custom contexts)</param>
            <returns>Newly created child context.</returns>
        </member>
        <member name="M:Metrics.MetricsContext.ShutdownContext(System.String)">
            <summary>
            Remove a child context. The metrics for the child context are removed from the MetricsData of the parent context.
            </summary>
            <param name="contextName">Name of the child context to shutdown.</param>
        </member>
        <member name="M:Metrics.MetricsContext.Gauge(System.String,System.Func{System.Double},Metrics.Unit,Metrics.MetricTags)">
            <summary>
            A gauge is the simplest metric type. It just returns a value. This metric is suitable for instantaneous values.
            </summary>
            <param name="name">Name of this gauge metric. Must be unique across all gauges in this context.</param>
            <param name="valueProvider">Function that returns the value for the gauge.</param>
            <param name="unit">Description of want the value represents ( Unit.Requests , Unit.Items etc ) .</param>
            <param name="tags">Optional set of tags that can be associated with the metric.</param>
        </member>
        <member name="M:Metrics.MetricsContext.PerformanceCounter(System.String,System.String,System.String,System.String,Metrics.Unit,Metrics.MetricTags)">
            <summary>
            Register a performance counter as a Gauge metric.
            </summary>
            <param name="name">Name of this gauge metric. Must be unique across all gauges in this context.</param>
            <param name="counterCategory">Category of the performance counter</param>
            <param name="counterName">Name of the performance counter</param>
            <param name="counterInstance">Instance of the performance counter</param>
            <param name="unit">Description of want the value represents ( Unit.Requests , Unit.Items etc ) .</param>
            <param name="tags">Optional set of tags that can be associated with the metric.</param>
        </member>
        <member name="M:Metrics.MetricsContext.Counter(System.String,Metrics.Unit,Metrics.MetricTags)">
            <summary>
            A counter is a simple incrementing and decrementing 64-bit integer. Ex number of active requests.
            </summary>
            <param name="name">Name of the metric. Must be unique across all counters in this context.</param>
            <param name="unit">Description of what the is being measured ( Unit.Requests , Unit.Items etc ) .</param>
            <param name="tags">Optional set of tags that can be associated with the metric.</param>
            <returns>Reference to the metric</returns>
        </member>
        <member name="M:Metrics.MetricsContext.Meter(System.String,Metrics.Unit,Metrics.TimeUnit,Metrics.MetricTags)">
            <summary>
            A meter measures the rate at which a set of events occur, in a few different ways. 
            This metric is suitable for keeping a record of now often something happens ( error, request etc ).
            </summary>
            <remarks>
            The mean rate is the average rate of events. It’s generally useful for trivia, 
            but as it represents the total rate for your application’s entire lifetime (e.g., the total number of requests handled, 
            divided by the number of seconds the process has been running), it doesn’t offer a sense of recency. 
            Luckily, meters also record three different exponentially-weighted moving average rates: the 1-, 5-, and 15-minute moving averages.
            </remarks>
            <param name="name">Name of the metric. Must be unique across all meters in this context.</param>
            <param name="unit">Description of what the is being measured ( Unit.Requests , Unit.Items etc ) .</param>
            <param name="rateUnit">Time unit for rates reporting. Defaults to Second ( occurrences / second ).</param>
            <param name="tags">Optional set of tags that can be associated with the metric.</param>
            <returns>Reference to the metric</returns>
        </member>
        <member name="M:Metrics.MetricsContext.Histogram(System.String,Metrics.Unit,Metrics.SamplingType,Metrics.MetricTags)">
            <summary>
            A Histogram measures the distribution of values in a stream of data: e.g., the number of results returned by a search.
            </summary>
            <param name="name">Name of the metric. Must be unique across all histograms in this context.</param>
            <param name="unit">Description of what the is being measured ( Unit.Requests , Unit.Items etc ) .</param>
            <param name="samplingType">Type of the sampling to use (see SamplingType for details ).</param>
            <param name="tags">Optional set of tags that can be associated with the metric.</param>
            <returns>Reference to the metric</returns>
        </member>
        <member name="M:Metrics.MetricsContext.Timer(System.String,Metrics.Unit,Metrics.SamplingType,Metrics.TimeUnit,Metrics.TimeUnit,Metrics.MetricTags)">
            <summary>
            A timer is basically a histogram of the duration of a type of event and a meter of the rate of its occurrence.
            <seealso cref="M:Metrics.MetricsContext.Histogram(System.String,Metrics.Unit,Metrics.SamplingType,Metrics.MetricTags)"/> and <seealso cref="M:Metrics.MetricsContext.Meter(System.String,Metrics.Unit,Metrics.TimeUnit,Metrics.MetricTags)"/>
            </summary>
            <param name="name">Name of the metric. Must be unique across all timers in this context.</param>
            <param name="unit">Description of what the is being measured ( Unit.Requests , Unit.Items etc ) .</param>
            <param name="samplingType">Type of the sampling to use (see SamplingType for details ).</param>
            <param name="rateUnit">Time unit for rates reporting. Defaults to Second ( occurrences / second ).</param>
            <param name="durationUnit">Time unit for reporting durations. Defaults to Milliseconds. </param>
            <param name="tags">Optional set of tags that can be associated with the metric.</param>
            <returns>Reference to the metric</returns>
        </member>
        <member name="P:Metrics.MetricsContext.Advanced">
            <summary>
            Exposes advanced operations that are possible on this metrics context.
            </summary>
        </member>
        <member name="P:Metrics.MetricsContext.DataProvider">
            <summary>
            Returns a metrics data provider capable of returning the metrics in this context and any existing child contexts.
            </summary>
        </member>
        <member name="T:Metrics.MetricData.MetricsDataProvider">
            <summary>
            A provider capable of returning the current values for a set of metrics
            </summary>
        </member>
        <member name="P:Metrics.MetricData.MetricsDataProvider.CurrentMetricsData">
            <summary>
            Returns the current metrics data for the context for which this provider has been created.
            </summary>
        </member>
        <member name="T:Metrics.Core.ReadOnlyMetricsContext">
            <summary>
            Read only metrics context ( ex: to capture metrics from a remote system )
            </summary>
        </member>
        <member name="T:Metrics.MetricData.MetricValueProvider`1">
            <summary>
            Indicates the ability to provide the value for a metric.
            This is the raw value. Consumers should use <see cref="T:Metrics.MetricData.MetricValueSource`1"/>
            </summary>
            <typeparam name="T">Type of the value returned by the metric</typeparam>
        </member>
        <member name="M:Metrics.MetricData.MetricValueProvider`1.GetValue(System.Boolean)">
            <summary>
            Get the current value for the metric, but also reset the metric.
            Useful for pushing data to only one consumer (ex: graphite) where you might want to only capture values just between the report interval.
            </summary>
            <param name="resetMetric">if set to true the metric will be reset.</param>
            <returns>The current value for the metric.</returns>
        </member>
        <member name="P:Metrics.MetricData.MetricValueProvider`1.Value">
            <summary>
            The current value of the metric.
            </summary>
        </member>
        <member name="F:Metrics.MetricData.CounterValue.Count">
            <summary>
            Total count of the counter instance.
            </summary>
        </member>
        <member name="F:Metrics.MetricData.CounterValue.Items">
            <summary>
            Separate counters for each registered set item.
            </summary>
        </member>
        <member name="F:Metrics.MetricData.CounterValue.SetItem.Item">
            <summary>
            Registered item name.
            </summary>
        </member>
        <member name="F:Metrics.MetricData.CounterValue.SetItem.Count">
            <summary>
            Specific count for this item.
            </summary>
        </member>
        <member name="F:Metrics.MetricData.CounterValue.SetItem.Percent">
            <summary>
            Percent of this item from the total count.
            </summary>
        </member>
        <member name="T:Metrics.MetricData.CounterValueSource">
            <summary>
            Combines the value for a counter with the defined unit for the value.
            </summary>
        </member>
        <member name="T:Metrics.MetricData.MetricValueSource`1">
            <summary>
            Provides the value of a metric and information about units.
            This is the class that metric consumers should use.
            </summary>
            <typeparam name="T">Type of the metric value</typeparam>
        </member>
        <member name="P:Metrics.MetricData.MetricValueSource`1.Name">
            <summary>
            Name of the metric.
            </summary>
        </member>
        <member name="P:Metrics.MetricData.MetricValueSource`1.Value">
            <summary>
            The current value of the metric.
            </summary>
        </member>
        <member name="P:Metrics.MetricData.MetricValueSource`1.Unit">
            <summary>
            Unit representing what the metric is measuring.
            </summary>
        </member>
        <member name="P:Metrics.MetricData.MetricValueSource`1.Tags">
            <summary>
            Tags associated with the metric.
            </summary>
        </member>
        <member name="P:Metrics.MetricData.MetricValueSource`1.ValueProvider">
            <summary>
            Instance capable of returning the current value for the metric.
            </summary>
        </member>
        <member name="T:Metrics.MetricData.GaugeValueSource">
            <summary>
            Combines the value of a gauge (a double) with the defined unit for the value.
            </summary>
        </member>
        <member name="T:Metrics.MetricData.HistogramValue">
            <summary>
            The value reported by a Histogram Metric
            </summary>
        </member>
        <member name="T:Metrics.MetricData.HistogramValueSource">
            <summary>
            Combines the value of the histogram with the defined unit for the value.
            </summary>
        </member>
        <member name="T:Metrics.MetricData.MeterValue">
            <summary>
            The value reported by a Meter Metric
            </summary>
        </member>
        <member name="T:Metrics.MetricData.MeterValueSource">
            <summary>
            Combines the value of the meter with the defined unit and the rate unit at which the value is reported.
            </summary>
        </member>
        <member name="T:Metrics.MetricData.TimerValue">
            <summary>
            The value reported by a Timer Metric
            </summary>
        </member>
        <member name="T:Metrics.MetricData.TimerValueSource">
            <summary>
            Combines the value of the timer with the defined unit and the time units for rate and duration.
            </summary>
        </member>
        <member name="T:Metrics.MetricTags">
            <summary>
            Collection of tags that can be attached to a metric.
            </summary>
        </member>
        <member name="M:Metrics.Sampling.ExponentiallyDecayingReservoir.Rescale">
            * "A common feature of the above techniques—indeed, the key technique that
        </member>
        <member name="T:Metrics.Counter">
            <summary>
            A counter is a simple incrementing and decrementing 64-bit integer.
            Each operation can also be applied to a item from a set and the counter will store individual count for each set item.
            </summary>
        </member>
        <member name="T:Metrics.ResetableMetric">
            <summary>
            Indicates a metric's ability to be reset. Reseting a metric clear all currently collected data.
            </summary>
        </member>
        <member name="M:Metrics.ResetableMetric.Reset">
            <summary>
            Clear all currently collected data for this metric.
            </summary>
        </member>
        <member name="M:Metrics.Counter.Increment">
            <summary>
            Increment the counter value.
            </summary>
        </member>
        <member name="M:Metrics.Counter.Increment(System.String)">
            <summary>
            Increment the counter value for an item from a set.
            The counter value is incremented but the counter will also keep track and increment another counter associated with the <paramref name="item"/>.
            The counter value will contain the total count and for each item the specific count and percentage of total count.
            </summary>
            <param name="item">Item from the set for which to increment the counter value.</param>
        </member>
        <member name="M:Metrics.Counter.Increment(System.Int64)">
            <summary>
            Increment the counter value with a specified amount.
            </summary>
            <param name="amount">The amount with which to increment the counter.</param>
        </member>
        <member name="M:Metrics.Counter.Increment(System.String,System.Int64)">
            <summary>
            Increment the counter value with a specified amount for an item from a set.
            The counter value is incremented but the counter will also keep track and increment another counter associated with the <paramref name="item"/>.
            The counter value will contain the total count and for each item the specific count and percentage of total count.
            </summary>
            <param name="item">Item from the set for which to increment the counter value.</param>
            <param name="amount">The amount with which to increment the counter.</param>
        </member>
        <member name="M:Metrics.Counter.Decrement">
            <summary>
            Decrement the counter value.
            </summary>
        </member>
        <member name="M:Metrics.Counter.Decrement(System.String)">
            <summary>
            Decrement the counter value for an item from a set.
            The counter value is decremented but the counter will also keep track and decrement another counter associated with the <paramref name="item"/>.
            The counter value will contain the total count and for each item the specific count and percentage of total count.
            </summary>
            <param name="item">Item from the set for which to increment the counter value.</param>
        </member>
        <member name="M:Metrics.Counter.Decrement(System.Int64)">
            <summary>
            Decrement the counter value with a specified amount.
            </summary>
            <param name="amount">The amount with which to increment the counter.</param>
        </member>
        <member name="M:Metrics.Counter.Decrement(System.String,System.Int64)">
            <summary>
            Decrement the counter value with a specified amount for an item from a set.
            The counter value is decremented but the counter will also keep track and decrement another counter associated with the <paramref name="item"/>.
            The counter value will contain the total count and for each item the specific count and percentage of total count.
            </summary>
            <param name="item">Item from the set for which to increment the counter value.</param>
            <param name="amount">The amount with which to increment the counter.</param>
        </member>
        <member name="T:Metrics.Meter">
            <summary>
            A meter measures the rate at which a set of events occur, in a few different ways. 
            The mean rate is the average rate of events. It’s generally useful for trivia, 
            but as it represents the total rate for your application’s entire lifetime (e.g., the total number of requests handled, 
            divided by the number of seconds the process has been running), it doesn’t offer a sense of recency. 
            Luckily, meters also record three different exponentially-weighted moving average rates: the 1-, 5-, and 15-minute moving averages.
            </summary>
        </member>
        <member name="M:Metrics.Meter.Mark">
            <summary>
            Mark the occurrence of an event.
            </summary>
        </member>
        <member name="M:Metrics.Meter.Mark(System.String)">
            <summary>
            Mark the occurrence of an event for an item in a set.
            The total rate of the event is updated, but the meter will also keep track and update a specific rate for each <paramref name="item"/> registered.
            The meter value will contain the total rate and for each registered item the specific rate and percentage of total count.
            </summary>
            <param name="item">Item from the set for which to record the event.</param>
        </member>
        <member name="M:Metrics.Meter.Mark(System.Int64)">
            <summary>
            Mark the occurrence of <paramref name="count"/> events.
            </summary>
            <param name="count"></param>
        </member>
        <member name="M:Metrics.Meter.Mark(System.String,System.Int64)">
            <summary>
            Mark the occurrence of <paramref name="count"/> events for an item in a set.
            The total rate of the event is updated, but the meter will also keep track and update a specific rate for each <paramref name="item"/> registered.
            The meter value will contain the total rate and for each registered item the specific rate and percentage of total count.
            </summary>
            <param name="count"></param>
            <param name="item">Item from the set for which to record the events.</param>
        </member>
        <member name="T:Metrics.Histogram">
            <summary>
            A Histogram measures the distribution of values in a stream of data: e.g., the number of results returned by a search.
            </summary>
        </member>
        <member name="M:Metrics.Histogram.Update(System.Int64,System.String)">
            <summary>
            Records a value.
            </summary>
            <param name="value">Value to be added to the histogram.</param>
            <param name="userValue">A custom user value that will be associated to the results.
            Useful for tracking (for example) for which id the max or min value was recorded.
            </param>
        </member>
        <member name="T:Metrics.Timer">
            <summary>
            A timer is basically a histogram of the duration of a type of event and a meter of the rate of its occurrence.
            <seealso cref="T:Metrics.Histogram"/> and <seealso cref="T:Metrics.Meter"/>
            </summary>
        </member>
        <member name="M:Metrics.Timer.Record(System.Int64,Metrics.TimeUnit,System.String)">
            <summary>
            Manually record timer value
            </summary>
            <param name="time">The value representing the manually measured time.</param>
            <param name="unit">Unit for the value.</param>
            <param name="userValue">A custom user value that will be associated to the results.
            Useful for tracking (for example) for which id the max or min value was recorded.
            </param>
        </member>
        <member name="M:Metrics.Timer.Time(System.Action,System.String)">
            <summary>
            Runs the <paramref name="action"/> and records the time it took.
            </summary>
            <param name="action">Action to run and record time for.</param>
            <param name="userValue">A custom user value that will be associated to the results.
            Useful for tracking (for example) for which id the max or min value was recorded.
            </param>
        </member>
        <member name="M:Metrics.Timer.Time``1(System.Func{``0},System.String)">
            <summary>
            Runs the <paramref name="action"/> returning the result and records the time it took.
            </summary>
            <typeparam name="T">Type of the value returned by the action</typeparam>
            <param name="action">Action to run and record time for.</param>
            <param name="userValue">A custom user value that will be associated to the results.
            Useful for tracking (for example) for which id the max or min value was recorded.
            </param>
            <returns>The result of the <paramref name="action"/></returns>
        </member>
        <member name="M:Metrics.Timer.NewContext(System.String)">
            <summary>
            Creates a new disposable instance and records the time it takes until the instance is disposed.
            <code>
            using(timer.NewContext())
            {
                ExecuteMethodThatNeedsMonitoring();
            }
            </code>
            </summary>
            <param name="userValue">A custom user value that will be associated to the results.
            Useful for tracking (for example) for which id the max or min value was recorded.
            </param>
            <returns>A disposable instance that will record the time passed until disposed.</returns>
        </member>
        <member name="M:Metrics.Timer.NewContext(System.Action{System.TimeSpan},System.String)">
            <summary>
            Creates a new disposable instance and records the time it takes until the instance is disposed.
            The <paramref name="finalAction"/> action is called after the context has been disposed
            <code>
            using(timer.NewContext( t => log.Debug(t)))
            {
                ExecuteMethodThatNeedsMonitoring();
            }
            </code>
            </summary>
            <param name="finalAction">Action to call after the context is disposed. The action is called with the measured time.</param>
            <param name="userValue">A custom user value that will be associated to the results.
            Useful for tracking (for example) for which id the max or min value was recorded.
            </param>
            <returns>A disposable instance that will record the time passed until disposed.</returns>
        </member>
        <member name="T:Metrics.TimerContext">
            <summary>
            Disposable instance used to measure time. 
            </summary>
        </member>
        <member name="P:Metrics.TimerContext.Elapsed">
            <summary>
            Provides the currently elapsed time from when the instance has been created
            </summary>
        </member>
        <member name="T:Metrics.HealthCheckResult">
            <summary>
            Result of a health check
            </summary>
        </member>
        <member name="F:Metrics.HealthCheckResult.IsHealthy">
            <summary>
            True if the check was successful, false if the check failed.
            </summary>
        </member>
        <member name="F:Metrics.HealthCheckResult.Message">
            <summary>
            Status message of the check. A status can be provided for both healthy and unhealthy states.
            </summary>
        </member>
        <member name="M:Metrics.HealthCheckResult.Healthy">
            <summary>
            Create a healthy status response.
            </summary>
            <returns>Healthy status response.</returns>
        </member>
        <member name="M:Metrics.HealthCheckResult.Healthy(System.String,System.Object[])">
            <summary>
            Create a healthy status response.
            </summary>
            <param name="message">Status message.</param>
            <param name="values">Values to format the status message with.</param>
            <returns>Healthy status response.</returns>
        </member>
        <member name="M:Metrics.HealthCheckResult.Unhealthy">
            <summary>
            Create a unhealthy status response.
            </summary>
            <returns>Unhealthy status response.</returns>
        </member>
        <member name="M:Metrics.HealthCheckResult.Unhealthy(System.String,System.Object[])">
            <summary>
            Create a unhealthy status response.
            </summary>
            <param name="message">Status message.</param>
            <param name="values">Values to format the status message with.</param>
            <returns>Unhealthy status response.</returns>
        </member>
        <member name="M:Metrics.HealthCheckResult.Unhealthy(System.Exception)">
            <summary>
            Create a unhealthy status response.
            </summary>
            <param name="exception">Exception to use for reason.</param>
            <returns>Unhealthy status response.</returns>
        </member>
        <member name="T:Metrics.HealthStatus">
            <summary>
            Structure describing the status of executing all the health checks operations.
            </summary>
        </member>
        <member name="F:Metrics.HealthStatus.HasRegisteredChecks">
            <summary>
            Flag indicating whether any checks are registered
            </summary>
        </member>
        <member name="F:Metrics.HealthStatus.IsHealthy">
            <summary>
            All health checks passed.
            </summary>
        </member>
        <member name="F:Metrics.HealthStatus.Results">
            <summary>
            Result of each health check operation
            </summary>
        </member>
        <member name="T:Metrics.HealthChecks">
            <summary>
            Registry for health checks
            </summary>
        </member>
        <member name="M:Metrics.HealthChecks.RegisterHealthCheck(System.String,System.Action)">
            <summary>
            Registers an action to monitor. If the action throws the health check fails, otherwise is successful.
            </summary>
            <param name="name">Name of the health check.</param>
            <param name="check">Action to execute.</param>
        </member>
        <member name="M:Metrics.HealthChecks.RegisterHealthCheck(System.String,System.Func{System.String})">
            <summary>
            Registers an action to monitor. If the action throws the health check fails, 
            otherwise is successful and the returned string is used as status message.
            </summary>
            <param name="name">Name of the health check.</param>
            <param name="check">Function to execute.</param>
        </member>
        <member name="M:Metrics.HealthChecks.RegisterHealthCheck(System.String,System.Func{Metrics.HealthCheckResult})">
            <summary>
            Registers a function to monitor. If the function throws or returns an HealthCheckResult.Unhealthy the check fails,
            otherwise the result of the function is used as a status.
            </summary>
            <param name="name">Name of the health check.</param>
            <param name="check">Function to execute</param>
        </member>
        <member name="M:Metrics.HealthChecks.RegisterHealthCheck(Metrics.Core.HealthCheck)">
            <summary>
            Registers a custom health check.
            </summary>
            <param name="healthCheck">Custom health check to register.</param>
        </member>
        <member name="M:Metrics.HealthChecks.GetStatus">
            <summary>
            Execute all registered checks and return overall.
            </summary>
            <returns>Status of the system.</returns>
        </member>
        <member name="M:Metrics.HealthChecks.UnregisterAllHealthChecks">
            <summary>
            Remove all the registered health checks.
            </summary>
        </member>
        <member name="M:Metrics.MetricsConfig.WithHttpEndpoint(System.String)">
            <summary>
            Create HTTP endpoint where metrics will be available in various formats:
            GET / => visualization application
            GET /json => metrics serialized as JSON
            GET /text => metrics in human readable text format
            </summary>
            <param name="httpUriPrefix">prefix where to start HTTP endpoint</param>
            <returns>Chain-able configuration object.</returns>
        </member>
        <member name="M:Metrics.MetricsConfig.WithHealthStatus(System.Func{Metrics.HealthStatus})">
            <summary>
            Configure Metrics library to use a custom health status reporter. By default HealthChecks.GetStatus() is used.
            </summary>
            <param name="healthStatus">Function that provides the current health status.</param>
            <returns>Chain-able configuration object.</returns>
        </member>
        <member name="M:Metrics.MetricsConfig.WithErrorHandler(System.Action{System.Exception},System.Boolean)">
            <summary>
            Error handler for the metrics library. If a handler is registered any error will be passed to the handler.
            By default unhandled errors are logged, printed to console if Environment.UserInteractive is true, and logged with Trace.TracError.
            </summary>
            <param name="errorHandler">Action with will be executed with the exception.</param>
            <param name="clearExistingHandlers">Is set to true, remove any existing handler.</param>
            <returns>Chain able configuration object.</returns>
        </member>
        <member name="M:Metrics.MetricsConfig.WithErrorHandler(System.Action{System.Exception,System.String},System.Boolean)">
            <summary>
            Error handler for the metrics library. If a handler is registered any error will be passed to the handler.
            By default unhandled errors are logged, printed to console if Environment.UserInteractive is true, and logged with Trace.TracError.
            </summary>
            <param name="errorHandler">Action with will be executed with the exception and a specific message.</param>
            <param name="clearExistingHandlers">Is set to true, remove any existing handler.</param>
            <returns>Chain able configuration object.</returns>
        </member>
        <member name="M:Metrics.MetricsConfig.WithReporting(System.Action{Metrics.Reports.MetricsReports})">
            <summary>
            Configure the way metrics are reported
            </summary>
            <param name="reportsConfig">Reports configuration action</param>
            <returns>Chain-able configuration object.</returns>
        </member>
        <member name="M:Metrics.MetricsConfig.WithConfigExtension(System.Action{Metrics.MetricsContext,System.Func{Metrics.HealthStatus}})">
            <summary>
            This method is used for customizing the metrics configuration.
            The <paramref name="extension"/> will be called with the current MetricsContext and HealthStatus provider.
            </summary>
            <remarks>
            In general you don't need to call this method directly.
            </remarks>
            <param name="extension">Action to apply extra configuration.</param>
            <returns>Chain-able configuration object.</returns>
        </member>
        <member name="M:Metrics.MetricsConfig.WithConfigExtension``1(System.Func{Metrics.MetricsContext,System.Func{Metrics.HealthStatus},``0})">
            <summary>
            This method is used for customizing the metrics configuration.
            The <paramref name="extension"/> will be called with the current MetricsContext and HealthStatus provider.
            </summary>
            <remarks>
            In general you don't need to call this method directly.
            </remarks>
            <param name="extension">Action to apply extra configuration.</param>
            <returns>The result of calling the extension.</returns>
        </member>
        <member name="M:Metrics.Reports.MetricsReports.WithReport(Metrics.Reporters.MetricsReport,System.TimeSpan)">
            <summary>
            Schedule a generic reporter to be executed at a fixed <paramref name="interval"/>
            </summary>
            <param name="report">Function that returns an instance of a reporter</param>
            <param name="interval">Interval at which to run the report.</param>
        </member>
        <member name="M:Metrics.Reports.MetricsReports.WithConsoleReport(System.TimeSpan)">
            <summary>
            Schedule a Console Report to be executed and displayed on the console at a fixed <paramref name="interval"/>.
            </summary>
            <param name="interval">Interval at which to display the report on the Console.</param>
        </member>
        <member name="M:Metrics.Reports.MetricsReports.WithCSVReports(System.String,System.TimeSpan,System.String)">
            <summary>
            Configure Metrics to append a line for each metric to a CSV file in the <paramref name="directory"/>.
            </summary>
            <param name="directory">Directory where to store the CSV files.</param>
            <param name="interval">Interval at which to append a line to the files.</param>
            <param name="delimiter">CSV delimiter to use</param>
        </member>
        <member name="M:Metrics.Reports.MetricsReports.WithTextFileReport(System.String,System.TimeSpan)">
            <summary>
            Schedule a Human Readable report to be executed and appended to a text file.
            </summary>
            <param name="filePath">File where to append the report.</param>
            <param name="interval">Interval at which to run the report.</param>
        </member>
        <member name="M:Metrics.Reports.MetricsReports.StopAndClearAllReports">
            <summary>
            Stop all registered reports and clear the registrations.
            </summary>
        </member>
        <member name="M:Metrics.PerformanceCountersConfigExtensions.WithAllCounters(Metrics.MetricsConfig,System.String,System.String)">
            <summary>
            Register all pre-defined performance counters as Gauge metrics.
            This includes System Counters, CLR Global Counters and CLR App Counters.
            </summary>
        </member>
        <member name="M:Metrics.PerformanceCountersConfigExtensions.WithSystemCounters(Metrics.MetricsConfig,System.String)">
            <summary>
            Register all pre-defined system performance counters as Gauge metrics.
            This includes: Available RAM, CPU Usage, Disk Writes/sec, Disk Reads/sec
            </summary>
        </member>
        <member name="M:Metrics.PerformanceCountersConfigExtensions.WithAppCounters(Metrics.MetricsConfig,System.String)">
            <summary>
            Register application level, CLR related performance counters as Gauge metrics.
            This includes: Mb in all heaps, time in GC, exceptions per sec, Threads etc.
            </summary>
        </member>
        <member name="F:Metrics.SamplingType.FavourRecent">
            <summary>
            Sampling will be done with a Exponentially Decaying Reservoir.
            </summary>
            <remarks>
            A histogram with an exponentially decaying reservoir produces quantiles which are representative of (roughly) the last five minutes of data.
            It does so by using a forward-decaying priority reservoir with an exponential weighting towards newer data. 
            Unlike the uniform reservoir, an exponentially decaying reservoir represents recent data, allowing you to know very quickly if the distribution 
            of the data has changed.
            More information about <a href="http://metrics.codahale.com/manual/core/#man-core-histograms">Exponentially Decaying Reservoir</a>
            </remarks>
        </member>
        <member name="F:Metrics.SamplingType.LongTerm">
            <summary>
            Sampling will done with a Uniform Reservoir.
            </summary>
            <remarks>
            A histogram with a uniform reservoir produces quantiles which are valid for the entirely of the histogram’s lifetime.
            It will return a median value, for example, which is the median of all the values the histogram has ever been updated with.
            Use a uniform histogram when you’re interested in long-term measurements. 
            Don’t use one where you’d want to know if the distribution of the underlying data stream has changed recently.
            More information about <a href="http://metrics.codahale.com/manual/core/#man-core-histograms">Exponentially Decaying Reservoir</a>
            </remarks>
        </member>
        <member name="F:Metrics.SamplingType.SlidingWindow">
            <summary>
            Sampling will done with a Sliding Window Reservoir.
            A histogram with a sliding window reservoir produces quantiles which are representative of the past N measurements.
            More information about <a href="http://metrics.codahale.com/manual/core/#man-core-histograms">Exponentially Decaying Reservoir</a>
            </summary>
        </member>
        <member name="T:Metrics.Metric">
            <summary>
            Static wrapper around a global MetricContext instance.
            </summary>
        </member>
        <member name="M:Metrics.Metric.Context(System.String)">
            <summary>
            Create a new child metrics context. Metrics added to the child context are kept separate from the metrics in the 
            parent context.
            </summary>
            <param name="contextName">Name of the child context.</param>
            <returns>Newly created child context.</returns>
        </member>
        <member name="M:Metrics.Metric.Context(System.String,System.Func{System.String,Metrics.MetricsContext})">
            <summary>
            Create a new child metrics context. Metrics added to the child context are kept separate from the metrics in the 
            parent context.
            </summary>
            <param name="contextName">Name of the child context.</param>
            <param name="contextCreator">Function used to create the instance of the child context. (Use for creating custom contexts)</param>
            <returns>Newly created child context.</returns>
        </member>
        <member name="M:Metrics.Metric.ShutdownContext(System.String)">
            <summary>
            Remove a child context. The metrics for the child context are removed from the MetricsData of the parent context.
            </summary>
            <param name="contextName">Name of the child context to shutdown.</param>
        </member>
        <member name="M:Metrics.Metric.PerformanceCounter(System.String,System.String,System.String,System.String,Metrics.Unit,Metrics.MetricTags)">
            <summary>
            Register a performance counter as a Gauge metric.
            </summary>
            <param name="name">Name of this gauge metric. Must be unique across all gauges in this context.</param>
            <param name="counterCategory">Category of the performance counter</param>
            <param name="counterName">Name of the performance counter</param>
            <param name="counterInstance">Instance of the performance counter</param>
            <param name="unit">Description of want the value represents ( Unit.Requests , Unit.Items etc ) .</param>
            <param name="tags">Optional set of tags that can be associated with the metric.</param>
            <returns>Reference to the gauge</returns>
        </member>
        <member name="M:Metrics.Metric.Gauge(System.String,System.Func{System.Double},Metrics.Unit,Metrics.MetricTags)">
            <summary>
            A gauge is the simplest metric type. It just returns a value. This metric is suitable for instantaneous values.
            </summary>
            <param name="name">Name of this gauge metric. Must be unique across all gauges in this context.</param>
            <param name="valueProvider">Function that returns the value for the gauge.</param>
            <param name="unit">Description of want the value represents ( Unit.Requests , Unit.Items etc ) .</param>
            <param name="tags">Optional set of tags that can be associated with the metric.</param>
            <returns>Reference to the gauge</returns>
        </member>
        <member name="M:Metrics.Metric.Meter(System.String,Metrics.Unit,Metrics.TimeUnit,Metrics.MetricTags)">
            <summary>
            A meter measures the rate at which a set of events occur, in a few different ways. 
            This metric is suitable for keeping a record of now often something happens ( error, request etc ).
            </summary>
            <remarks>
            The mean rate is the average rate of events. It’s generally useful for trivia, 
            but as it represents the total rate for your application’s entire lifetime (e.g., the total number of requests handled, 
            divided by the number of seconds the process has been running), it doesn’t offer a sense of recency. 
            Luckily, meters also record three different exponentially-weighted moving average rates: the 1-, 5-, and 15-minute moving averages.
            </remarks>
            <param name="name">Name of the metric. Must be unique across all meters in this context.</param>
            <param name="unit">Description of what the is being measured ( Unit.Requests , Unit.Items etc ) .</param>
            <param name="rateUnit">Time unit for rates reporting. Defaults to Second ( occurrences / second ).</param>
            <param name="tags">Optional set of tags that can be associated with the metric.</param>
            <returns>Reference to the metric</returns>
        </member>
        <member name="M:Metrics.Metric.Counter(System.String,Metrics.Unit,Metrics.MetricTags)">
            <summary>
            A counter is a simple incrementing and decrementing 64-bit integer. Ex number of active requests.
            </summary>
            <param name="name">Name of the metric. Must be unique across all counters in this context.</param>
            <param name="unit">Description of what the is being measured ( Unit.Requests , Unit.Items etc ) .</param>
            <param name="tags">Optional set of tags that can be associated with the metric. Tags can be string array or comma separated values in a string.
            ex: tags: "tag1,tag2" or tags: new[] {"tag1", "tag2"}
            </param>
            <returns>Reference to the metric</returns>
        </member>
        <member name="M:Metrics.Metric.Histogram(System.String,Metrics.Unit,Metrics.SamplingType,Metrics.MetricTags)">
            <summary>
            A Histogram measures the distribution of values in a stream of data: e.g., the number of results returned by a search.
            </summary>
            <param name="name">Name of the metric. Must be unique across all histograms in this context.</param>
            <param name="unit">Description of what the is being measured ( Unit.Requests , Unit.Items etc ) .</param>
            <param name="samplingType">Type of the sampling to use (see SamplingType for details ).</param>
            <param name="tags">Optional set of tags that can be associated with the metric.</param>
            <returns>Reference to the metric</returns>
        </member>
        <member name="M:Metrics.Metric.Timer(System.String,Metrics.Unit,Metrics.SamplingType,Metrics.TimeUnit,Metrics.TimeUnit,Metrics.MetricTags)">
            <summary>
            A timer is basically a histogram of the duration of a type of event and a meter of the rate of its occurrence.
            <seealso cref="M:Metrics.Metric.Histogram(System.String,Metrics.Unit,Metrics.SamplingType,Metrics.MetricTags)"/> and <seealso cref="M:Metrics.Metric.Meter(System.String,Metrics.Unit,Metrics.TimeUnit,Metrics.MetricTags)"/>
            </summary>
            <param name="name">Name of the metric. Must be unique across all timers in this context.</param>
            <param name="unit">Description of what the is being measured ( Unit.Requests , Unit.Items etc ) .</param>
            <param name="samplingType">Type of the sampling to use (see SamplingType for details ).</param>
            <param name="rateUnit">Time unit for rates reporting. Defaults to Second ( occurrences / second ).</param>
            <param name="durationUnit">Time unit for reporting durations. Defaults to Milliseconds. </param>
            <param name="tags">Optional set of tags that can be associated with the metric.</param>
            <returns>Reference to the metric</returns>
        </member>
        <member name="P:Metrics.Metric.Advanced">
            <summary>
            Exposes advanced operations that are possible on this metrics context.
            </summary>
        </member>
        <member name="P:Metrics.Metric.Config">
            <summary>
            Entrypoint for Global Metrics Configuration.
            </summary>
            <example>
            <code>
            Metric.Config
                .WithHttpEndpoint("http://localhost:1234/")
                .WithErrorHandler(x => Console.WriteLine(x.ToString()))
                .WithAllCounters()
                .WithReporting(config => config
                    .WithConsoleReport(TimeSpan.FromSeconds(30))
                    .WithCSVReports(@"c:\temp\reports\", TimeSpan.FromSeconds(10))
                    .WithTextFileReport(@"C:\temp\reports\metrics.txt", TimeSpan.FromSeconds(10))
                );
            </code>
            </example>
        </member>
        <member name="T:Metrics.Utils.ActionScheduler">
            <summary>
            Utility class to schedule an Action to be executed repeatedly according to the interval.
            </summary>
            <remarks>
            The scheduling code is inspired form Daniel Crenna's metrics port
            https://github.com/danielcrenna/metrics-net/blob/master/src/metrics/Reporting/ReporterBase.cs
            </remarks>
        </member>
        <member name="T:Metrics.Utils.Scheduler">
            <summary>
            Indicates the ability to schedule the execution of an Action at a specified interval
            </summary>
        </member>
        <member name="M:Metrics.Utils.Scheduler.Start(System.TimeSpan,System.Action)">
            <summary>
            Schedule the <paramref name="action"/> to be executed at <paramref name="interval"/>.
            </summary>
            <param name="interval">Interval at which to execute action</param>
            <param name="action">Action to execute</param>
        </member>
        <member name="M:Metrics.Utils.Scheduler.Start(System.TimeSpan,System.Action{System.Threading.CancellationToken})">
            <summary>
            Schedule the <paramref name="action"/> to be executed at <paramref name="interval"/>.
            </summary>
            <param name="interval">Interval at which to execute action</param>
            <param name="action">Action to execute</param>
        </member>
        <member name="M:Metrics.Utils.Scheduler.Start(System.TimeSpan,System.Func{System.Threading.Tasks.Task})">
            <summary>
            Schedule the <paramref name="action"/> to be executed at <paramref name="interval"/>.
            The returned task is await-ed on each time the <paramref name="action"/> is invoked.
            </summary>
            <param name="interval">Interval at which to execute action</param>
            <param name="action">Action to execute</param>
        </member>
        <member name="M:Metrics.Utils.Scheduler.Start(System.TimeSpan,System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task})">
            <summary>
            Schedule the <paramref name="action"/> to be executed at <paramref name="interval"/>.
            The returned task is await-ed on each time the <paramref name="action"/> is invoked.
            </summary>
            <param name="interval">Interval at which to execute action</param>
            <param name="action">Action to execute</param>
        </member>
        <member name="M:Metrics.Utils.Scheduler.Stop">
            <summary>
            Stop the scheduler.
            </summary>
        </member>
        <member name="T:Metrics.Utils.EWMA">
            <summary>
            An exponentially-weighted moving average.
            <a href="http://www.teamquest.com/pdfs/whitepaper/ldavg1.pdf">UNIX Load Average Part 1: How It Works</a>
            <a href="http://www.teamquest.com/pdfs/whitepaper/ldavg2.pdf">UNIX Load Average Part 2: Not Your Average Average</a>
            <a href="http://en.wikipedia.org/wiki/Moving_average#Exponential_moving_average">EMA</a>
            </summary>
        </member>
        <member name="T:Metrics.Utils.AtomicLong">
            <summary>
            Atomic long.
            TBD: implement optimizations behind LongAdder from 
            <a href="https://github.com/dropwizard/metrics/blob/master/metrics-core/src/main/java/com/codahale/metrics/LongAdder.java">metrics-core</a>
            </summary>
        </member>
    </members>
</doc>
